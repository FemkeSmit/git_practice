testData <- matrix(1:12,ncol = 3)
sd(testData)
autoscaling <- function(dat){
m <- colMeans(dat)
s <- apply(dat,2,sd)
dat2 <- (dat - m)/s
}
test <) autoscaling(testData)
test <- autoscaling(testData)
View(test)
autoscaling <- function(dat){
m <- colMeans(dat)
s <- apply(dat,2,sd)
dat2 <- (dat - m)/s
return(dat2)
}
test <- autoscaling(testData)
View(test)
View(testData)
(1 - mean(c(1,2,3,4)))/sd(c(1,2,3,4))
(4 - mean(c(1,2,3,4)))/sd(c(1,2,3,4))
View(test)
source("test.R")
#Sourcing functions
source("autoscaling.R")
source("Mean_center.R")
source("paretofunc.R")
source("Range_Scaling.R")
data <- read.table("Data_tocheck.csv", sep = ";")
cross_validate <- function(dat,scaling){
if (!require('caret')){
BiocManager::install('caret')
}
}
cross_validate(data,'something')
test <- createFolds(1:nrow(data),1)
View(test)
test <- createFolds(1:nrow(data),k = 1,p = 0.8)
View(data)
data <- read.table("Data_tocheck.csv", sep = ";")
View(data)
data <- read.csv("Data_tocheck.csv")
data <- read.csv("Data_tocheck.csv")
data <- read.delim("Data_tocheck.txt")
View(data)
data <- read.delim("Data_tocheck.txt",header = FALSE)
autoscaling <- function(dat){
m <- colMeans(dat)
s <- apply(dat,2,sd)
dat2[[1]] <- vector('list',3)
dat2[[1]] <- sweep(dat,2,m,'-')
dat2[[1]] <- sweep(dat2,2,s,'/')
dat2[[2]] <- m
dat2[[3]] <- s
names(dat2) <- c('matrix','mean','sd')
return(dat2)
}
data <- read.delim("Data_tocheck.txt",header = FALSE)
test <- autoscaling(data)
autoscaling <- function(dat){
m <- colMeans(dat)
s <- apply(dat,2,sd)
dat2 <- vector('list',3)
dat2[[1]] <- sweep(dat,2,m,'-')
dat2[[1]] <- sweep(dat2,2,s,'/')
dat2[[2]] <- m
dat2[[3]] <- s
names(dat2) <- c('matrix','mean','sd')
return(dat2)
}
test <- autoscaling(data)
autoscaling <- function(dat){
m <- colMeans(dat)
s <- apply(dat,2,sd)
res <- vector('list',3)
dat2 <- sweep(dat,2,m,'-')
dat2 <- sweep(dat2,2,s,'/')
res[[2]] <- m
res[[3]] <- s
names(res) <- c('matrix','mean','sd')
return(res)
}
test <- autoscaling(data)
View(test)
autoscaling <- function(dat){
m <- colMeans(dat)
s <- apply(dat,2,sd)
res <- vector('list',3)
dat2 <- sweep(dat,2,m,'-')
dat2 <- sweep(dat2,2,s,'/')
res[[1]] <- dat2
res[[2]] <- m
res[[3]] <- s
names(res) <- c('matrix','mean','sd')
return(res)
}
test <- autoscaling(data)
View(test)
data <- read.delim("Data_tocheck.txt",header = FALSE)
#--------------------#
#   Options to set   #
#--------------------#
dat <- data
cv_one <- 5
cv_two <- 10
scaling <- "autoscaling"
#cross_validate <- function(dat,cv_one,scaling){
## dat = data, cv_one = number of outer loops, cv_two = number of inner loops,
## scaling = scaling functions from: 'autoscaling','mean_center','pareto'
#Make sure caret is there
if (!require('caret')){
BiocManager::install('caret')
}
#Sourcing functions
source("autoscaling.R")
source("Mean_center.R")
source("paretofunc.R")
source("Range_Scaling.R")
#outer test/train division
results <- vector('list',cv_one)
trainIndex <- caret::createDataPartition(1:nrow(data),times = cv_one,p = 0.8,returnTrain = TRUE)
#inner crossvalidation
for (i in 1:length(trainIndex)){
trainSet <- data[trainIndex[[i]],]
testSet <- data[-trainIndex[[i]],]
trainCVIndex <- caret::createDataPartition(1:nrow(trainSet),times = cv_two,p = 0.8,returnTrain = TRUE)
for (ii in 1:length(trainCVIndex)){
trainSet2 <- trainSet[trainCVIndex[[ii]],]
testSet2 <- trainSet[-trainCVIndex[[ii]],]
#Scaling the test sets
if (scaling == 'autoscaling'){
scaled <- autoscaling(trainSet2)
testSet2Scaled <- sweep(testSet2,2,scaled[[2]],'-')
testSet2Scaled <- sweep(testSet2Scaled,2,scaled[[3]],'/')
testSetScaled <- sweep(testSet,2,scaled[[2]],'-')
testSetScaled <- sweep(testSetScaled,2,scaled[[3]],'/')
}
if (scaling == "mean_center"){
scaled <- center_colmeans(trainSet2)
}
if (scaling == "pareto"){
scaled <- paretoscaling(trainSet2)
}
#scaling training set
trainSet2Scaled <- scaled[[1]]
#THIS IS WHERE TRAINING AND INNER CROSS VALIDATION WOULD HAPPEN
}
#THIS IS WHERE COMPARAISON WITH INDEPENDENT TEST SET WOULD HAPPEN
}
#THIS IS WHERE OVERALL RESULTS WOULD BE ASSESSED
#}
trainIndex <- caret::createDataPartition(1:nrow(data),times = cv_one,p = 0.8,returnTrain = TRUE)
trainIndex <- caret::createDataPartition(1:nrow(data),times = cv_one,p = 0.8)
View(trainIndex)
#outer test/train division
results <- vector('list',cv_one)
trainIndex <- caret::createDataPartition(1:nrow(data),times = cv_one,p = 0.8)
#inner crossvalidation
for (i in 1:length(trainIndex)){
trainSet <- data[trainIndex[[i]],]
testSet <- data[-trainIndex[[i]],]
trainCVIndex <- caret::createDataPartition(1:nrow(trainSet),times = cv_two,p = 0.8)
for (ii in 1:length(trainCVIndex)){
trainSet2 <- trainSet[trainCVIndex[[ii]],]
testSet2 <- trainSet[-trainCVIndex[[ii]],]
#Scaling the test sets
if (scaling == 'autoscaling'){
scaled <- autoscaling(trainSet2)
testSet2Scaled <- sweep(testSet2,2,scaled[[2]],'-')
testSet2Scaled <- sweep(testSet2Scaled,2,scaled[[3]],'/')
testSetScaled <- sweep(testSet,2,scaled[[2]],'-')
testSetScaled <- sweep(testSetScaled,2,scaled[[3]],'/')
}
if (scaling == "mean_center"){
scaled <- center_colmeans(trainSet2)
}
if (scaling == "pareto"){
scaled <- paretoscaling(trainSet2)
}
#scaling training set
trainSet2Scaled <- scaled[[1]]
#THIS IS WHERE TRAINING AND INNER CROSS VALIDATION WOULD HAPPEN
}
#THIS IS WHERE COMPARAISON WITH INDEPENDENT TEST SET WOULD HAPPEN
}
#THIS IS WHERE OVERALL RESULTS WOULD BE ASSESSED
#}
View(testSet2Scaled)
View(trainSet2Scaled)
View(trainSet2)
